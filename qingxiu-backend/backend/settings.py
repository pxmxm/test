"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import datetime
import os
import mongoengine

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# 项目跟目录
from datetime import timedelta

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# /Users/tuanzi/seimun_projects/backend

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 项目安全码
SECRET_KEY = 'pqmr_c+)s47%livn7-f&--@zitxsbe#wbg$6nzq9l8)uliz^a!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 允许访问的主机
ALLOWED_HOSTS = ["*"]

# 已安装应用
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_mongoengine',
    # 跨域问题
    'corsheaders',
    'users.apps.UsersConfig',
    'project.apps.ProjectConfig',
    'subject.apps.SubjectConfig',
    'research.apps.ResearchConfig',
    'contract.apps.ContractConfig',
    'report.apps.ReportConfig',
    'change.apps.ChangeConfig',
    'funding.apps.FundingConfig',
    'blacklist.apps.BlacklistConfig',
    'concluding.apps.ConcludingConfig',
    'termination.apps.TerminationConfig',
    'tpl.apps.TplConfig',
    'warehouse.apps.WarehouseConfig',
    'upload.apps.UploadConfig',
    'expert.apps.ExpertConfig',
    'sms.apps.SmsConfig',
]

# 中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 跨域问题
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'backend.Mymiddlewares.LogMiddle',
    'backend.Mymiddlewares.get_token',
    'backend.Mymiddlewares.get_username_token'
]
#  跨域问题
CORS_ORIGIN_ALLOW_ALL = True

# URL根文件
ROOT_URLCONF = 'backend.urls'

# 配置模版
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# PG_NAME = os.getenv('PG_NAME') if os.getenv('PG_NAME') is not None else 'uroot'
# PG_USER = os.getenv('PG_USER') if os.getenv('PG_USER') is not None else 'uroot'
# PG_PASSWORD = os.getenv('PG_PASSWORD') if os.getenv('PG_PASSWORD') is not None else 'uroot123'
# PG_HOST = os.getenv('PG_HOST') if os.getenv('PG_HOST') is not None else '39.107.75.182'
# PG_PORT = os.getenv('PG_PORT') if os.getenv('PG_PORT') is not None else '5432'
#
# PG_NAME = os.getenv('PG_NAME') if os.getenv('PG_NAME') is not None else 'tuanzi'
# PG_USER = os.getenv('PG_USER') if os.getenv('PG_USER') is not None else 'tuanzi'
# PG_PASSWORD = os.getenv('PG_PASSWORD') if os.getenv('PG_PASSWORD') is not None else 'tuanzi123'
# PG_HOST = os.getenv('PG_HOST') if os.getenv('PG_HOST') is not None else '39.107.75.182'
# PG_PORT = os.getenv('PG_PORT') if os.getenv('PG_PORT') is not None else '5432'

PG_NAME = os.getenv('PG_NAME') if os.getenv('PG_NAME') is not None else 'qxkj'
PG_USER = os.getenv('PG_USER') if os.getenv('PG_USER') is not None else 'qxkj'
PG_PASSWORD = os.getenv('PG_PASSWORD') if os.getenv('PG_PASSWORD') is not None else 'qxkj123'
PG_HOST = os.getenv('PG_HOST') if os.getenv('PG_HOST') is not None else '39.107.75.182'
PG_PORT = os.getenv('PG_PORT') if os.getenv('PG_PORT') is not None else '5432'

# 数据库配置ma
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': PG_NAME,
        'USER': PG_USER,
        'PASSWORD': PG_PASSWORD,
        'HOST': PG_HOST,
        'PORT': PG_PORT,
    }

}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
# 密码认证
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
# 静态文件地址
STATIC_URL = '/static/'

REDIS_HOST = os.getenv('REDIS_HOST') if os.getenv('REDIS_HOST') is not None else '39.107.75.182'
REDIS_PASS = os.getenv('REDIS_HOST') if os.getenv('REDIS_PASS') is not None else 'redis123'
REDIS_PORT = os.getenv('REDIS_PORT') if os.getenv('REDIS_PORT') is not None else '6379'

# celery
# 任务放在用redis://ip:端口/第几个数据库
BROKER_URL = "redis://:%s@%s:%s/14" % (REDIS_PASS, REDIS_HOST, REDIS_PORT)
# 任务结果放在
CELERY_RESULT_BACKEND = "redis://:%s@%s:%s/15" % (REDIS_PASS, REDIS_HOST, REDIS_PORT)
CELERY_ACCEPT_CONTENT = ['application/json', ]
CELERY_TASK_SERIALIZER = 'json'
# 结果序列化
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# 指定用户认证体系
AUTH_USER_MODEL = 'users.User'

JWT_AUTH = {
    # jwt过期时间
    # 'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=1),
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    # 'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=1),
    # 配置自定义jwt返回内容
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.utils.jwt_response_payload_handler',
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,
    # 渲染
    'DEFAULT_RENDERER_CLASSES': ('rest_framework.renderers.JSONRenderer',),
    # 'EXCEPTION_HANDLER': 'backend.exceptions.custom_exception_handler',

    # # 全局认证
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/second',
        'user': '50/second'
    },
}

# 数字验证码 缓存位置设置
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://:%s@%s:%s/0' % (REDIS_PASS, REDIS_HOST, REDIS_PORT),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

MINIO_HOST = os.getenv('MINIO_HOST') if os.getenv('MINIO_HOST') is not None else '39.107.75.182'
MINIO_PORT = os.getenv('MINIO_PORT') if os.getenv('MINIO_PORT') is not None else '19000'
MINIO_AK = os.getenv('MINIO_AK') if os.getenv('MINIO_AK') is not None else 'tuanzi'
MINIO_SK = os.getenv('MINIO_SK') if os.getenv('MINIO_SK') is not None else 'tuanzi123'

MINIO = {
    'SERVER': MINIO_HOST,
    'PORT': MINIO_PORT,
    'ACCESS_KEY': MINIO_AK,
    'SECRET_KEY': MINIO_SK
}

MONGODB_HOST = os.getenv('MONGODB_HOST') if os.getenv('MONGODB_HOST') is not None else '39.107.75.182'
MONGODB_PORT = os.getenv('MONGODB_PORT') if os.getenv('MONGODB_PORT') is not None else '27017'
MONGODB_USER = os.getenv('MONGODB_USER') if os.getenv('MONGODB_USER') is not None else 'tuanzi'
MONGODB_PASSWORD = os.getenv('MONGODB_PASSWORD') if os.getenv('MONGODB_PASSWORD') is not None else 'tuanzi'
# MONGODB_NAME = os.getenv('MONGODB_NAME') if os.getenv('MONGODB_NAME') is not None else 'tuanzi'
# MONGODB_NAME = os.getenv('MONGODB_NAME') if os.getenv('MONGODB_NAME') is not None else 'anan'
MONGODB_NAME = os.getenv('MONGODB_NAME') if os.getenv('MONGODB_NAME') is not None else 'qxkj'


mongoengine.connect(MONGODB_NAME, host=MONGODB_HOST, port=int(MONGODB_PORT), username=MONGODB_USER,
                    password=MONGODB_PASSWORD)
MEDIA_URL = '/file/'
# 上传位置
MEDIA_ROOT = os.path.join(BASE_DIR, 'file/')
# IMAGE_ROOT = os.path.join(MEDIA_ROOT, 'file/')
WEB_HOST_MEDIA_URL = os.path.join('http://192.168.0.107:8000', MEDIA_URL[1:],)
print(WEB_HOST_MEDIA_URL)

#
ALIYUN_ACCESS_KEY = 'LTAI4GGLzVV1kT9mzG5fpXM5'
ALIYUN_ACCESS_SECRET = 'FQhAjRSgMmY143zCZWITtVj0VaFTy7'
ALIYUN_SIGNNAME = '青秀区科学技术局'
ALIYUN_TEMPLATECODE = 'SMS_205404861'


LOGGING = {
    'version': 1,
    # 禁用日志
    'disable_existing_loggers': False,
    'loggers': {
        '': {
            # 将系统接受到的体制，交给handler去处理
            'handlers': ['console'],
            'level': 'INFO',
        }
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '%s/%s' % (BASE_DIR, "logs/edu.log"),
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份数
            # 'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
        'console': {
            # handler将日志信息存放在day6/logs/sys.log
            'filename': '%s/%s' % (BASE_DIR, "logs/edu.log"),
            'level': 'INFO',
            # 指定日志的格式
            'formatter': '',
            # 备份
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志文件大小：5M
            'maxBytes': 5 * 1024 * 1024,
            'encoding': "utf-8"
        }
    },
    'formatters': {
        'default': {
            'format': '%(asctime)s %(message)s'
        }
    }
}
